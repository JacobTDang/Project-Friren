# Generated by Django - Trading System Database Schema
# Create coordination_config table for dynamic configuration management

from django.db import migrations, models
import json


class Migration(migrations.Migration):

    dependencies = [
        ('database', '0005_add_strategy_assignment_fields'),
    ]

    operations = [
        migrations.RunSQL(
            # Create coordination_config table
            """
            CREATE TABLE coordination_config (
                id SERIAL PRIMARY KEY,
                config_type VARCHAR(50) NOT NULL,
                config_value JSONB NOT NULL,
                active BOOLEAN DEFAULT true,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
            """,
            # Reverse migration - drop the table
            "DROP TABLE IF EXISTS coordination_config;"
        ),
        
        migrations.RunSQL(
            # Insert default configuration values
            """
            INSERT INTO coordination_config (config_type, config_value) VALUES
            ('process_priorities', '{
                "enhanced_news_pipeline": 9,
                "decision_engine": 8,
                "position_health_monitor": 7,
                "strategy_analyzer": 6,
                "risk_manager": 5,
                "execution_engine": 4,
                "market_data_collector": 3
            }'),
            ('message_concurrent_limits', '{
                "news_collection": 2,
                "sentiment_analysis": 3,
                "trading_signal": 5,
                "risk_assessment": 3,
                "execution_order": 1,
                "position_update": 3,
                "strategy_assignment": 2,
                "market_data": 10,
                "system_health": 5,
                "default": 100,
                "high_priority": 50
            }'),
            ('message_cooldown_periods', '{
                "news_collection": 5.0,
                "sentiment_analysis": 1.0,
                "trading_signal": 0.0,
                "risk_assessment": 0.0,
                "execution_order": 2.0,
                "position_update": 1.0,
                "strategy_assignment": 5.0,
                "market_data": 0.1,
                "system_health": 1.0,
                "news": 30,
                "decisions": 60,
                "health": 300
            }'),
            ('message_priority_scores', '{
                "execution_order": 100.0,
                "risk_assessment": 90.0,
                "trading_signal": 80.0,
                "position_update": 70.0,
                "sentiment_analysis": 60.0,
                "news_collection": 50.0,
                "strategy_assignment": 40.0,
                "market_data": 30.0,
                "system_health": 20.0
            }'),
            ('message_required_fields', '{
                "coordination": ["message_id", "sender", "recipient", "message_type", "timestamp"],
                "heartbeat": ["process_id", "timestamp", "status"],
                "state_update": ["process_id", "state_data", "timestamp"],
                "recovery": ["process_id", "action_type", "reason", "timestamp"]
            }'),
            ('valid_message_types', '[
                "coordination", "heartbeat", "state_update", "recovery",
                "news_collection", "sentiment_analysis", "trading_signal",
                "risk_assessment", "execution_order", "position_update",
                "strategy_assignment", "market_data", "system_health"
            ]');
            """,
            # Reverse - delete the inserted data
            """
            DELETE FROM coordination_config WHERE config_type IN (
                'process_priorities', 'message_concurrent_limits', 'message_cooldown_periods',
                'message_priority_scores', 'message_required_fields', 'valid_message_types'
            );
            """
        ),
        
        migrations.RunSQL(
            # Create unique index and performance index
            """
            CREATE UNIQUE INDEX IF NOT EXISTS unique_coordination_config_type_active 
            ON coordination_config(config_type) 
            WHERE active = true;
            
            CREATE INDEX IF NOT EXISTS idx_coordination_config_type_active 
            ON coordination_config(config_type, active) 
            WHERE active = true;
            """,
            # Reverse - drop the indexes
            """
            DROP INDEX IF EXISTS unique_coordination_config_type_active;
            DROP INDEX IF EXISTS idx_coordination_config_type_active;
            """
        ),
        
        migrations.RunSQL(
            # Create updated_at trigger for automatic timestamp updates
            """
            CREATE OR REPLACE FUNCTION update_coordination_config_updated_at()
            RETURNS TRIGGER AS $$
            BEGIN
                NEW.updated_at = CURRENT_TIMESTAMP;
                RETURN NEW;
            END;
            $$ language 'plpgsql';
            
            CREATE TRIGGER update_coordination_config_updated_at
                BEFORE UPDATE ON coordination_config
                FOR EACH ROW
                EXECUTE FUNCTION update_coordination_config_updated_at();
            """,
            # Reverse - drop trigger and function
            """
            DROP TRIGGER IF EXISTS update_coordination_config_updated_at ON coordination_config;
            DROP FUNCTION IF EXISTS update_coordination_config_updated_at();
            """
        )
    ]
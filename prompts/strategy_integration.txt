<?xml version="1.0" encoding="UTF-8"?>
<StrategyConversionPrompt>
 <Meta>
   <Task>Convert existing backtesting strategies to production strategies for portfolio manager</Task>
   <Approach>Pure separation - no regime logic in strategies</Approach>
   <Objective>Create 5 production strategies that integrate seamlessly with strategy selector</Objective>
 </Meta>

 <ExistingCodebase>
   <BacktestingStrategies>
     <Strategy file="ma_bt.py" class="MA_backtester" method="backtest_ma_strategy">
       <Logic>SMA 10 > SMA 20 = buy signal, SMA 10 < SMA 20 = sell signal</Logic>
       <ConvertTo>MomentumStrategy</ConvertTo>
     </Strategy>

     <Strategy file="rsi_bt.py" class="rsi_backtest" method="backtest_rsi_strategy">
       <Logic>RSI <= 30 = buy signal (oversold), RSI >= 70 = sell signal (overbought)</Logic>
       <ConvertTo>MeanReversionStrategy</ConvertTo>
     </Strategy>

     <Strategy file="bolinger_bt.py" class="bb_backtest" method="backtest_bollinger_strategy">
       <Logic>Price touches lower band = buy, price touches upper band = sell</Logic>
       <ConvertTo>BollingerStrategy</ConvertTo>
     </Strategy>

     <Strategy file="kalman_bt.py" class="KalmanMeanReversionBacktest" method="backtest_kalman_strategy">
       <Logic>Kalman Z-score <= -1.5 = buy, Z-score >= -0.3 = sell</Logic>
       <ConvertTo>VolatilityStrategy</ConvertTo>
     </Strategy>

     <Strategy file="conPair_bt.py" class="CointegrationPairsBacktest" method="backtest_pairs_strategy">
       <Logic>Spread Z-score <= -2.0 = long spread, Z-score >= 2.0 = short spread</Logic>
       <ConvertTo>PairsStrategy</ConvertTo>
     </Strategy>
   </BacktestingStrategies>

   <ExistingTools>
     <Tool>StockDataTools class with technical indicator methods</Tool>
     <Tool>add_moving_averages(), add_rsi(), add_bollinger_bands() methods</Tool>
     <Tool>All existing technical analysis functionality</Tool>
   </ExistingTools>
 </ExistingCodebase>

 <RequiredInterface>
   <BaseStrategy>
     <AbstractClass>portfolio_manager/strategies/base_strategy.py</AbstractClass>
     <RequiredMethods>
       <Method name="generate_signal">
         <Parameters>
           <Parameter>df: pandas.DataFrame (OHLCV data)</Parameter>
           <Parameter>sentiment: float (-1.0 to +1.0)</Parameter>
           <Parameter>confidence_threshold: float (0-100)</Parameter>
         </Parameters>
         <Returns>StrategySignal object</Returns>
         <Purpose>Generate BUY/SELL/HOLD signal with confidence</Purpose>
       </Method>

       <Method name="get_signal_confidence">
         <Parameters>
           <Parameter>df: pandas.DataFrame (current market data)</Parameter>
         </Parameters>
         <Returns>float (0-100 confidence score)</Returns>
         <Purpose>Rate confidence in current signal without sentiment influence</Purpose>
       </Method>

       <Method name="get_strategy_metadata">
         <Parameters>None</Parameters>
         <Returns>StrategyMetadata object</Returns>
         <Purpose>Provide static information about strategy characteristics</Purpose>
       </Method>
     </RequiredMethods>
   </BaseStrategy>

   <StrategySignal>
     <Properties>
       <Property name="action">String: 'BUY', 'SELL', or 'HOLD'</Property>
       <Property name="confidence">Float: 0-100 scale</Property>
       <Property name="reasoning">String: Human-readable explanation</Property>
       <Property name="position_size_modifier">Float: 0.5-2.0 multiplier for base position size</Property>
       <Property name="stop_loss_modifier">Float: 0.5-2.0 multiplier for base stop loss</Property>
       <Property name="strategy_name">String: Strategy identifier</Property>
     </Properties>
   </StrategySignal>

   <StrategyMetadata>
     <Properties>
       <Property name="name">String: Strategy display name</Property>
       <Property name="category">String: MOMENTUM/MEAN_REVERSION/VOLATILITY/PAIRS</Property>
       <Property name="typical_holding_period">Int: Expected days to hold position</Property>
       <Property name="works_best_in">String: Description of optimal market conditions</Property>
       <Property name="min_confidence_threshold">Int: Minimum confidence to generate signal</Property>
     </Properties>
   </StrategyMetadata>
 </RequiredInterface>

 <ConversionInstructions>
   <Instruction priority="CRITICAL">
     <Rule>DO NOT modify existing StockDataTools methods or backtesting classes</Rule>
     <Rule>ONLY create new strategy files in portfolio_manager/strategies/</Rule>
     <Rule>EXTRACT signal logic from existing backtest methods without copying portfolio management code</Rule>
   </Instruction>

   <Instruction priority="HIGH">
     <Rule>Each strategy must inherit from BaseStrategy abstract class</Rule>
     <Rule>Use existing StockDataTools instance to add technical indicators to DataFrame</Rule>
     <Rule>Focus ONLY on signal generation - no portfolio tracking, no performance metrics</Rule>
     <Rule>All strategies must work with same OHLCV DataFrame input format</Rule>
   </Instruction>

   <Instruction priority="MEDIUM">
     <Rule>Include sentiment as input but keep integration simple and logical</Rule>
     <Rule>Calculate confidence based on signal strength (how extreme the technical indicator is)</Rule>
     <Rule>Provide clear reasoning string explaining why signal was generated</Rule>
     <Rule>Set appropriate metadata for each strategy type</Rule>
   </Instruction>

   <Instruction priority="LOW">
     <Rule>Add position_size_modifier and stop_loss_modifier based on signal strength</Rule>
     <Rule>Include error handling for missing data or calculation failures</Rule>
     <Rule>Log strategy decisions for debugging purposes</Rule>
   </Instruction>
 </ConversionInstructions>

 <SpecificStrategyRequirements>
   <MomentumStrategy>
     <SignalLogic>
       <Rule>Use StockDataTools.add_moving_averages() to add SMA_10 and SMA_20</Rule>
       <Rule>BUY when SMA_10 > SMA_20 AND sentiment > -0.3</Rule>
       <Rule>SELL when SMA_10 < SMA_20 AND sentiment < 0.3</Rule>
       <Rule>HOLD when SMA signals are weak or sentiment conflicts strongly</Rule>
     </SignalLogic>
     <ConfidenceCalculation>
       <Formula>confidence = min(100, abs(sma_10 - sma_20) / sma_20 * 1000)</Formula>
       <Logic>Larger SMA separation = higher confidence in trend</Logic>
     </ConfidenceCalculation>
     <SentimentIntegration>
       <Rule>Reduce confidence by 30% if sentiment opposes signal direction</Rule>
       <Rule>Increase confidence by 10% if sentiment strongly supports signal</Rule>
     </SentimentIntegration>
     <Metadata>
       <Name>Moving Average Momentum</Name>
       <Category>MOMENTUM</Category>
       <TypicalHolding>7</TypicalHolding>
       <WorksBestIn>Trending markets with clear directional movement</WorksBestIn>
       <MinConfidence>65</MinConfidence>
     </Metadata>
   </MomentumStrategy>

   <MeanReversionStrategy>
     <SignalLogic>
       <Rule>Use StockDataTools.add_rsi() to add RSI indicator</Rule>
       <Rule>BUY when RSI <= 30 (oversold condition)</Rule>
       <Rule>SELL when RSI >= 70 (overbought condition)</Rule>
       <Rule>HOLD when RSI is in neutral zone (30-70)</Rule>
     </SignalLogic>
     <ConfidenceCalculation>
       <Formula>confidence = min(100, abs(50 - rsi) * 2)</Formula>
       <Logic>More extreme RSI values = higher confidence in mean reversion</Logic>
     </ConfidenceCalculation>
     <SentimentIntegration>
       <Rule>Increase confidence by 20% if sentiment opposes current price extreme</Rule>
       <Rule>Decrease confidence by 20% if sentiment reinforces price extreme</Rule>
     </SentimentIntegration>
     <Metadata>
       <Name>RSI Mean Reversion</Name>
       <Category>MEAN_REVERSION</Category>
       <TypicalHolding>5</TypicalHolding>
       <WorksBestIn>Range-bound markets with clear overbought/oversold levels</WorksBestIn>
       <MinConfidence>70</MinConfidence>
     </Metadata>
   </MeanReversionStrategy>

   <BollingerStrategy>
     <SignalLogic>
       <Rule>Use StockDataTools.add_bollinger_bands() to add bands</Rule>
       <Rule>BUY when Close <= LowerBand (price at or below lower band)</Rule>
       <Rule>SELL when Close >= UpperBand (price at or above upper band)</Rule>
       <Rule>HOLD when price is within bands</Rule>
     </SignalLogic>
     <ConfidenceCalculation>
       <Formula>bb_position = (Close - LowerBand) / (UpperBand - LowerBand)</Formula>
       <Formula>confidence = min(100, abs(bb_position - 0.5) * 200)</Formula>
       <Logic>Closer to band edges = higher confidence in reversion</Logic>
     </ConfidenceCalculation>
     <SentimentIntegration>
       <Rule>Strong sentiment + band touch = potential breakout (reduce confidence 40%)</Rule>
       <Rule>Weak sentiment + band touch = likely reversion (increase confidence 20%)</Rule>
     </SentimentIntegration>
     <Metadata>
       <Name>Bollinger Band Reversion</Name>
       <Category>MEAN_REVERSION</Category>
       <TypicalHolding>6</TypicalHolding>
       <WorksBestIn>Markets with consistent volatility and mean reversion patterns</WorksBestIn>
       <MinConfidence>65</MinConfidence>
     </Metadata>
   </BollingerStrategy>

   <VolatilityStrategy>
     <SignalLogic>
       <Rule>Use KalmanFilter class from existing code to calculate fair value and Z-score</Rule>
       <Rule>BUY when kalman_zscore <= -1.2 (price significantly below fair value)</Rule>
       <Rule>SELL when kalman_zscore >= -0.2 (price returned near fair value)</Rule>
       <Rule>HOLD when Z-score doesn't meet thresholds</Rule>
     </SignalLogic>
     <ConfidenceCalculation>
       <Formula>confidence = min(100, abs(kalman_zscore) * 40)</Formula>
       <Logic>Higher Z-score deviation = higher confidence in mean reversion</Logic>
     </ConfidenceCalculation>
     <SentimentIntegration>
       <Rule>Use sentiment as position sizing modifier only (not signal filter)</Rule>
       <Rule>Strong negative sentiment = reduce position_size_modifier to 0.7</Rule>
       <Rule>Positive sentiment = increase position_size_modifier to 1.3</Rule>
     </SentimentIntegration>
     <Metadata>
       <Name>Kalman Filter Volatility</Name>
       <Category>VOLATILITY</Category>
       <TypicalHolding>4</TypicalHolding>
       <WorksBestIn>High volatility markets with strong mean reversion tendencies</WorksBestIn>
       <MinConfidence>75</MinConfidence>
     </Metadata>
   </VolatilityStrategy>

   <PairsStrategy>
     <SignalLogic>
       <Rule>Use CointegrationAnalyzer from existing code to calculate spread and Z-score</Rule>
       <Rule>BUY when spread_zscore <= -2.0 (long spread: buy stock1, sell stock2)</Rule>
       <Rule>SELL when spread_zscore >= 2.0 (short spread: sell stock1, buy stock2)</Rule>
       <Rule>HOLD when spread Z-score is between -2.0 and 2.0</Rule>
       <Note>This strategy requires TWO stocks as input - handle specially in orchestrator</Note>
     </SignalLogic>
     <ConfidenceCalculation>
       <Formula>confidence = min(100, abs(spread_zscore) * 30)</Formula>
       <Logic>Higher spread deviation = higher confidence in pairs reversion</Logic>
     </ConfidenceCalculation>
     <SentimentIntegration>
       <Rule>Compare sentiment of both stocks in pair</Rule>
       <Rule>If sentiment divergence supports spread direction, increase confidence 25%</Rule>
       <Rule>If sentiment divergence opposes spread direction, decrease confidence 25%</Rule>
     </SentimentIntegration>
     <Metadata>
       <Name>Cointegration Pairs Trading</Name>
       <Category>PAIRS</Category>
       <TypicalHolding>12</TypicalHolding>
       <WorksBestIn>Markets with stable correlations between related stocks</WorksBestIn>
       <MinConfidence>70</MinConfidence>
     </Metadata>
   </PairsStrategy>
 </SpecificStrategyRequirements>

 <ImplementationConstraints>
   <Constraint type="CODE_REUSE">
     <Rule>MUST use existing StockDataTools instance - do not create new technical analysis code</Rule>
     <Rule>MUST reuse existing Kalman filter and cointegration analysis classes</Rule>
     <Rule>MUST extract logic from backtest classes without copying portfolio management code</Rule>
   </Constraint>

   <Constraint type="SIMPLICITY">
     <Rule>Keep each strategy under 150 lines of code</Rule>
     <Rule>Focus on core signal generation logic only</Rule>
     <Rule>No complex optimization or parameter tuning</Rule>
     <Rule>No backtesting or performance tracking in production strategies</Rule>
   </Constraint>

   <Constraint type="STANDARDIZATION">
     <Rule>All strategies must accept same DataFrame input format (OHLCV)</Rule>
     <Rule>All confidence scores must be 0-100 scale</Rule>
     <Rule>All strategies must handle missing data gracefully</Rule>
     <Rule>All strategies must provide meaningful error messages</Rule>
   </Constraint>

   <Constraint type="INTEGRATION">
     <Rule>Strategies must work independently - no dependencies between strategies</Rule>
     <Rule>Strategy selector must be able to auto-discover all strategies</Rule>
     <Rule>No hardcoded regime logic in strategies</Rule>
     <Rule>Clean separation between signal generation and portfolio management</Rule>
   </Constraint>
 </ImplementationConstraints>

 <FileStructure>
   <CreateFiles>
     <File>portfolio_manager/strategies/__init__.py</File>
     <File>portfolio_manager/strategies/base_strategy.py</File>
     <File>portfolio_manager/strategies/momentum_strategy.py</File>
     <File>portfolio_manager/strategies/mean_reversion_strategy.py</File>
     <File>portfolio_manager/strategies/bollinger_strategy.py</File>
     <File>portfolio_manager/strategies/volatility_strategy.py</File>
     <File>portfolio_manager/strategies/pairs_strategy.py</File>
   </CreateFiles>

   <DoNotModify>
     <File>trading_engine/backtesting/*.py</File>
     <File>trading_engine/data/data_utils.py</File>
     <File>trading_engine/data/yahoo.py</File>
   </DoNotModify>
 </FileStructure>

 <TestingRequirements>
   <Test type="UNIT">
     <Rule>Each strategy must be testable independently</Rule>
     <Rule>Test with sample OHLCV data to verify signal generation</Rule>
     <Rule>Test confidence calculation produces reasonable values (0-100)</Rule>
     <Rule>Test sentiment integration affects signals appropriately</Rule>
   </Test>

   <Test type="INTEGRATION">
     <Rule>All strategies must inherit from BaseStrategy correctly</Rule>
     <Rule>Strategy selector must be able to discover and instantiate all strategies</Rule>
     <Rule>Verify signals match expected logic from original backtest classes</Rule>
   </Test>

   <Test type="DATA">
     <Rule>Test with edge cases: missing data, extreme values, insufficient history</Rule>
     <Rule>Verify strategies handle errors gracefully without crashing</Rule>
     <Rule>Test with various market conditions (trending, sideways, volatile)</Rule>
   </Test>
 </TestingRequirements>

 <SuccessCriteria>
   <Criterion>All 5 strategies successfully inherit from BaseStrategy</Criterion>
   <Criterion>Each strategy generates appropriate BUY/SELL/HOLD signals</Criterion>
   <Criterion>Confidence scores range from 0-100 and correlate with signal strength</Criterion>
   <Criterion>Sentiment integration works logically for each strategy type</Criterion>
   <Criterion>Strategies can be discovered and used by strategy selector automatically</Criterion>
   <Criterion>No modification required to existing backtesting or data tools code</Criterion>
   <Criterion>Each strategy provides clear reasoning for generated signals</Criterion>
 </SuccessCriteria>

 <DeliveryFormat>
   <Requirement>Create all files with complete, working code</Requirement>
   <Requirement>Include comprehensive docstrings explaining each method</Requirement>
   <Requirement>Add inline comments explaining signal logic and confidence calculations</Requirement>
   <Requirement>Include example usage for each strategy</Requirement>
   <Requirement>Provide test cases demonstrating strategy functionality</Requirement>
 </DeliveryFormat>
</StrategyConversionPrompt>

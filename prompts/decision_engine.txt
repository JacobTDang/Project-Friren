<claude_instructions>
<context>
  <project>Friren_V1 Trading System - Market Decision Engine Development</project>
  <architecture>
    <existing_infrastructure>
      <multiprocess_system>BaseProcess inheritance pattern with 5 processes max on t3.micro EC2</multiprocess_system>
      <queue_system>Priority queues with MessageType/MessagePriority enums</queue_system>
      <shared_state>Thread-safe shared state manager for market data</shared_state>
      <database>TradingDBManager with Django models for persistence</database>
    </existing_infrastructure>

    <existing_tools>
      <strategy_selector>10+ trading strategies with market regime selection</strategy_selector>
      <position_sizer>Portfolio allocation with regime/sentiment integration</position_sizer>
      <db_manager>Transaction recording and position tracking</db_manager>
      <multiprocess_manager>Parallel task execution for t3.micro optimization</multiprocess_manager>
    </existing_tools>

    <data_pipeline>
      <inputs>
        <strategy_analyzer>STRATEGY_SIGNAL messages every 2.5 minutes</strategy_analyzer>
        <finbert_sentiment>SENTIMENT_UPDATE messages from news analysis</finbert_sentiment>
        <position_health_monitor>HEALTH_ALERT messages for risk management</position_health_monitor>
        <combined_analyzer>REGIME_CHANGE messages for market conditions</combined_analyzer>
      </inputs>
    </data_pipeline>
  </architecture>

  <decision_engine_requirements>
    <behavior>aggressive - process every queue message immediately</behavior>
    <signal_weighting>technical(30%) + market(30%) + sentiment(30%) + risk(10%)</signal_weighting>
    <position_rule>one position per symbol - long OR short, never both</position_rule>
    <conflict_resolution>XGBoost with rule-based fallback</conflict_resolution>
    <execution>market orders with cost basis averaging</execution>
    <risk_authority>risk_manager has final veto power over all decisions</risk_authority>
    <adaptation>parameters adapt to market conditions (chaos regime, volatility, performance)</adaptation>
    <monitoring>track 5 key metrics - t3.micro stress, risk, decision quality, signal accuracy, system performance</monitoring>
  </decision_engine_requirements>
</context>

<coding_guidelines>
  <architecture_patterns>
    <inheritance>Always inherit from BaseProcess for main processes</inheritance>
    <separation>Keep business logic in separate utility classes from process infrastructure</separation>
    <integration>Leverage existing tools - don't rebuild functionality</integration>
    <error_handling>Graceful degradation with fallback strategies</error_handling>
  </architecture_patterns>

  <coding_style>
    <imports>Use existing infrastructure imports, create stubs if unavailable</imports>
    <docstrings>Clear class/method documentation explaining purpose and integration</docstrings>
    <logging>Use logging extensively for decision audit trail</logging>
    <dataclasses>Use dataclasses for clean data structures</dataclasses>
    <type_hints>Include type hints for all function parameters and returns</type_hints>
  </coding_style>

  <performance_optimization>
    <memory>Optimize for t3.micro 1GB RAM constraint</memory>
    <cpu>Efficient processing for 2-core system</cpu>
    <caching>Smart caching with memory limits</caching>
    <batching>Batch operations where possible</batching>
  </performance_optimization>
</coding_guidelines>

<implementation_approach>
  <phase_1>Core decision engine components in decision_engine/ directory</phase_1>
  <phase_2>New execution tools in portfolio_manager/tools/</phase_2>
  <phase_3>System management enhancements in multiprocess_infrastructure/</phase_3>
  <integration_testing>Test with existing processes and queue messages</integration_testing>
  <iterative_development>Build one component at a time, test integration</iterative_development>
</implementation_approach>

<key_integration_points>
  <queue_processing>Handle STRATEGY_SIGNAL, SENTIMENT_UPDATE, HEALTH_ALERT, REGIME_CHANGE messages</queue_processing>
  <tool_reuse>Use StrategySelector, PositionSizer, TradingDBManager, MultiprocessManager</tool_reuse>
  <shared_state>Read market data, positions, regime info from SharedStateManager</shared_state>
  <database>Record trades using existing TradingDBManager patterns</database>
  <alpaca_integration>Paper trading with market orders and position tracking</alpaca_integration>
</key_integration_points>

<decision_flow_architecture>
  <signal_aggregation>Adaptive weighting based on market regime and performance</signal_aggregation>
  <risk_validation>Two-checkpoint system - initial validation + final veto</risk_validation>
  <ml_enhancement>XGBoost conflict resolution with SHAP explainability</ml_enhancement>
  <execution_coordination>Order management, strategy assignment, database updates</execution_coordination>
  <force_close_monitoring>Automatic position closure on terrible sentiment/risk</force_close_monitoring>
</decision_flow_architecture>
</claude_instructions>

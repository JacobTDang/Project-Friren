<PostgreSQL_Setup_Prompt>
  <Context>
    Building a cybernetic learning ML system for trading that needs to store training data and learn from trade outcomes.
  </Context>

  <Requirements>
    <DatabaseTables>
      <Table name="current_positions">Store active portfolio positions (symbol, quantity, value, strategy used)</Table>
      <Table name="historical_trades">Store completed trades (entry/exit prices, P&L, holding period)</Table>
      <Table name="trade_features">Store ML features at trade time (market data, sentiment, regime, strategy signals)</Table>
      <Table name="model_predictions">Store predictions and actual outcomes for learning</Table>
      <Table name="model_versions">Store model metadata and performance tracking</Table>
    </DatabaseTables>

    <Performance>
      <Requirement>Support high-frequency feature queries for real-time predictions</Requirement>
      <Requirement>Enable efficient training data extraction for model retraining</Requirement>
      <Requirement>Track prediction accuracy over time for cybernetic learning</Requirement>
      <Requirement>Handle time series data with proper indexing</Requirement>
    </Performance>
  </Requirements>

  <Deliverables>
    <Item>Complete database schema SQL with relationships and indexes</Item>
    <Item>Python PostgreSQLHandler class with connection pooling</Item>
    <Item>Basic CRUD operations for all tables</Item>
    <Item>Performance optimization for ML workloads</Item>
  </Deliverables>

  <SuccessCriteria>
    Can insert trade features and query training data efficiently for model retraining
  </SuccessCriteria>
</PostgreSQL_Setup_Prompt>

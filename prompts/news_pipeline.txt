<?xml version="1.0" encoding="UTF-8"?>
<claude_instructions>
 <task>
   Create an Enhanced News Collector Process that wraps the Enhanced News Collector utility class and integrates into the existing multiprocess trading system architecture
 </task>

 <integration_context>
   <trading_system>multiprocess swing trading system for EC2 t3.micro</trading_system>
   <max_processes>5</max_processes>
   <architecture>child process that feeds combined_analyzer_process</architecture>
   <existing_infrastructure>
     <base_process>multiprocess_infrastructure/base_process.py</base_process>
     <queue_manager>multiprocess_infrastructure/queue_manager.py</queue_manager>
     <shared_state_manager>multiprocess_infrastructure/shared_state_manager.py</shared_state_manager>
   </existing_infrastructure>
 </integration_context>

 <requirements>
   <inheritance>Inherit from BaseProcess (existing multiprocess infrastructure)</inheritance>
   <utility_usage>Use the EnhancedNewsCollector utility class we just built</utility_usage>
   <frequency>every_5_10_minutes during normal operation</frequency>
   <regime_triggers>immediate processing on regime change alerts from combined_analyzer_process</regime_triggers>
   <queue_handling>Handle NEWS_REQUEST messages from decision engine and strategy analyzer</queue_handling>
   <caching>Implement memory-aware caching with 100MB limit for t3.micro constraints</caching>
   <finbert_integration>Send processed articles to FinBERT queue for sentiment analysis</finbert_integration>
   <shared_state>Update shared_state with enhanced_sentiment_scores for decision engine</shared_state>
   <precaching>Run every 20 minutes during market hours for watchlist pre-caching</precaching>
   <error_handling>continue_with_cached_data_on_api_failures like other child processes</error_handling>
 </requirements>

 <architecture>
   <file_location>processes/enhanced_news_collector_process.py</file_location>
   <base_components>
     <component>BaseProcess (from multiprocess_infrastructure)</component>
     <component>QueueManager (existing priority queue system)</component>
     <component>SharedStateManager (thread-safe shared memory)</component>
     <component>EnhancedNewsCollector (utility we just created)</component>
   </base_components>
   <message_types>
     <type>NEWS_REQUEST (from strategy_analyzer_process and decision_engine)</type>
     <type>REGIME_CHANGE (from combined_analyzer_process regime detection)</type>
     <type>WATCHLIST_UPDATE (periodic precaching)</type>
     <type>FINBERT_ANALYSIS (outgoing to FinBERT process)</type>
   </message_types>
   <communication_patterns>
     <input>receive_pre_analyzed_requests_from_child_processes</input>
     <output>update_shared_state_with_sentiment_and_news_data</output>
     <queue_priority>high_for_regime_changes_medium_for_regular_requests</queue_priority>
   </communication_patterns>
 </architecture>

 <constraints>
   <memory>100MB cache limit for t3.micro EC2 (1GB total RAM)</memory>
   <performance>optimized_for_2_core_system</performance>
   <api_efficiency>smart_rate_limit_management_quality_over_quantity</api_efficiency>
   <integration>must work with existing multiprocess architecture</integration>
   <error_recovery>child_processes_continue_with_cached_data</error_recovery>
   <decision_latency>acceptable_for_swing_trading_5_to_30_seconds</decision_latency>
 </constraints>

 <shared_state_integration>
   <data_types>
     <enhanced_sentiment_scores>multi_source_news_sentiment_for_decision_engine</enhanced_sentiment_scores>
     <news_metadata>article_counts_sources_used_confidence_scores</news_metadata>
     <last_update_timestamps>per_symbol_freshness_tracking</last_update_timestamps>
   </data_types>
   <update_pattern>atomic_updates_thread_safe_access</update_pattern>
 </shared_state_integration>

 <finbert_queue_integration>
   <output_format>
     <articles_for_sentiment>processed_deduplicated_articles_ready_for_finbert</articles_for_sentiment>
     <priority_handling>regime_change_articles_get_high_priority</priority_handling>
     <batch_optimization>group_articles_by_symbol_for_efficient_processing</batch_optimization>
   </output_format>
 </finbert_queue_integration>
</claude_instructions>
